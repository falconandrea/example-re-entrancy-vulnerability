// test/SecureContract.js
const { expect } = require("chai")
const hre = require("hardhat")

describe("SecureContract", () => {
  it("should allow normal withdrawal without re-entrancy attack", async function () {
    const secureContract = await hre.ethers.deployContract("SecureContract", [])
    await secureContract.waitForDeployment()

    const attackContract = await hre.ethers.deployContract("AttackContract", [
      secureContract.target
    ])
    await attackContract.waitForDeployment()

    const [_, user, attacker] = await hre.ethers.getSigners()

    const initialBalance = await hre.ethers.provider.getBalance(attacker.address)

    // Attacker deposits funds to the secure contract
    await secureContract.connect(attacker).deposit({ value: hre.ethers.parseEther("1") })

    // Perform a normal withdrawal
    await secureContract.connect(attacker).withdraw()

    // Check the attacker's balance after withdrawal
    const finalBalance = await hre.ethers.provider.getBalance(attacker.address)
    expect(finalBalance).to.be.closeTo(initialBalance, hre.ethers.parseEther("0.1"))
  })

  it("should block the attacker to exploit the re-entrancy vulnerability", async () => {
    const secureContract = await hre.ethers.deployContract("SecureContract", [])
    await secureContract.waitForDeployment()

    const attackContract = await hre.ethers.deployContract("AttackContract", [
      secureContract.target
    ])
    await attackContract.waitForDeployment()

    const [_, user, attacker] = await hre.ethers.getSigners()

    // A user deposits funds to the secure contract
    const userDeposit = hre.ethers.parseEther("5")
    const depositTx = await secureContract.connect(user).deposit({ value: userDeposit })
    await depositTx.wait()

    // Check init balance of secure contract
    const initialBalanceContract = await hre.ethers.provider.getBalance(secureContract.target)

    await expect(attackContract.connect(attacker).attack({
      value: hre.ethers.parseEther("0.1"),
    })).to.be.revertedWith("Failed to send ether")

    // Check final balance of secure contract
    const finalBalanceContract = await hre.ethers.provider.getBalance(secureContract.target)
    expect(finalBalanceContract).to.be.equal(initialBalanceContract)
  })
})
