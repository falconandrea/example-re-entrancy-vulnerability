// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract SecureContract {
    mapping(address => uint) balances;

    // Add mapping to lock the withdraw
    mapping(address => bool) locked;

    // Send ETH from `balances[msg.sender]` to msg.sender
    function withdraw() public {
        // Check if the withdraw is locked for the user
        require(!locked[msg.sender], "Withdraw is locked");

        // Check balance deposited
        require(balances[msg.sender] > 0, "Insufficient balance");

        // Subtract ETH
        uint amount = balances[msg.sender];
        balances[msg.sender] = 0;

        // Lock the withdrawal temporarily
        locked[msg.sender] = true;

        // Transfer ETH
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Failed to send ether");

        // Unlock the withdrawal
        locked[msg.sender] = false;
    }

    // Update the `balances` mapping to include the new ETH deposited by msg.sender
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }
}
