// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract VulnerableContract {
    mapping(address => uint) balances;

    // Send ETH from `balances[msg.sender]` to msg.sender
    function withdraw() public {
        // Check balance deposited
        require(balances[msg.sender] > 0, "Insufficient balance");

        // Transfer ETH
        (bool success, ) = msg.sender.call{value: balances[msg.sender]}("");
        require(success, "Failed to send ether");

        // This code becomes unreachable because the contract's balance is drained before user's balance could have been set to 0
        balances[msg.sender] = 0;
    }

    // Update the `balances` mapping to include the new ETH deposited by msg.sender
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }
}
